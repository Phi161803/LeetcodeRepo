class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int i, j, temp, valcheck; // this solution uses valcheck as an array of booleans using bitwise operations
        for(i = 0; i < 9; i++){ //rows first
            valcheck = 0;
            for(j = 0; j < 9; j++){
                if(board[i][j] == '.') continue; // skips if the space has no number
                temp = 1<<(board[i][j]-'0'); // sets the nth bit of "temp" to 1, all others to 0
                if(temp&valcheck) return false; // checks if that bit is already set in valcheck; true if not 0, only not 0 if a bit repeats
                valcheck = temp|valcheck; // sets that bit to 1 in valcheck
            }
        }
        for(j = 0; j < 9; j++){ //columns next
            valcheck = 0;
            for(i = 0; i < 9; i++){
                if(board[i][j] == '.') continue;
                temp = 1<<(board[i][j]-'0');
                if(temp&valcheck) return false;
                valcheck = temp|valcheck;
            }
        }
        for(int a = 0; a < 9; a += 3){ //squares last
            for(int b = 0; b < 9; b += 3){
                valcheck = 0;
                for(i = a; i < a+3; i++){
                    for(j = b; j < b+3; j++){
                        if(board[i][j] == '.') continue;
                        temp = 1<<(board[i][j]-'0');
                        if(temp&valcheck) return false;
                        valcheck = temp|valcheck;
                    }
                }
            }
        }
        return true;
    }
};
